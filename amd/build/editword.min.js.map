{"version":3,"file":"editword.min.js","sources":["../src/editword.js"],"sourcesContent":["import ajax from \"core/ajax\";\nimport notification from \"core/notification\";\nimport ModalFactory from \"core/modal_factory\";\nimport ModalEvents from \"core/modal_events\";\nimport {get_string as getString} from 'core/str';\n\nexport const init = () => {\n    document.mod_wordcloud_update_entry = function (aid, backurl) {\n        let wordlist = document.querySelectorAll(\".mod-wordcloud-edit-word\");\n        const changes = [];\n        const doubleentries = [];\n        const allentries = new Set();\n        const collectedentries = new Set();\n\n        for (let i = 0; i < wordlist.length; i++) {\n            let worditem = wordlist[i];\n\n            if (allentries.has(worditem.value)) {\n                doubleentries.push(worditem.value);\n            } else {\n                allentries.add(worditem.value);\n            }\n\n            if (worditem.dataset.word != worditem.value) {\n                changes.push({\n                    wordid: worditem.dataset.id,\n                    newword: worditem.value,\n                    newcount: document.getElementById(\"mod-wordcloud-count\" + worditem.dataset.id).value\n                });\n                collectedentries.add(worditem.dataset.id);\n            }\n        }\n\n        wordlist = document.querySelectorAll(\".mod-wordcloud-edit-count\");\n\n        for (let i = 0; i < wordlist.length; i++) {\n            let worditem = wordlist[i];\n            if (worditem.dataset.count != worditem.value) {\n                if (!collectedentries.has(worditem.dataset.id)) {\n                    changes.push({\n                        wordid: worditem.dataset.id,\n                        newword: document.getElementById(\"mod-wordcloud-word\" + worditem.dataset.id).value,\n                        newcount: worditem.value\n                    });\n                }\n            }\n        }\n\n        if (doubleentries.length) {\n            ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: getString('warning', 'mod_wordcloud'),\n                body: confirmationMessage(doubleentries.toString()),\n            }).then(function (modal) {\n                modal.getRoot().on(ModalEvents.save, function(e) {\n                    e.preventDefault();\n                    sendWsCall(aid, changes, backurl);\n                });\n\n                modal.getRoot().on(ModalEvents.cancel, () => {\n                    location.reload();\n                });\n\n                modal.getRoot().on(ModalEvents.hidden, () => {\n                    modal.destroy();\n                });\n\n                modal.show();\n            });\n        } else {\n            sendWsCall(aid, changes, backurl);\n        }\n    };\n};\n\nconst confirmationMessage = async(data) => {\n    const confirmationWarning = await getString('warningdoubleentries', 'mod_wordcloud');\n    return confirmationWarning + data;\n};\n\nconst sendWsCall = (aid, changes, backurl) => {\n    ajax.call([{\n        methodname: 'mod_wordcloud_update_entry',\n        args: {aid: aid, entry: changes},\n        done: function (returnval) {\n            if (!returnval.success) {\n                ModalFactory.create({\n                    type: ModalFactory.types.CANCEL,\n                    title: getString('warning', 'mod_wordcloud'),\n                    body: returnval.warnings[0].message,\n                }).then(function (modal) {\n                    modal.getRoot().on(ModalEvents.cancel, () => {\n                        location.reload();\n                    });\n                    modal.show();\n                });\n            } else {\n                location.href = backurl;\n            }\n        },\n        fail: notification.exception\n    }]);\n};"],"names":["document","mod_wordcloud_update_entry","aid","backurl","wordlist","querySelectorAll","changes","doubleentries","allentries","Set","collectedentries","i","length","worditem","has","value","push","add","dataset","word","wordid","id","newword","newcount","getElementById","count","create","type","ModalFactory","types","SAVE_CANCEL","title","body","confirmationMessage","toString","then","modal","getRoot","on","ModalEvents","save","e","preventDefault","sendWsCall","cancel","location","reload","hidden","destroy","show","async","data","call","methodname","args","entry","done","returnval","success","href","CANCEL","warnings","message","fail","notification","exception"],"mappings":"yjBAMoB,KAChBA,SAASC,2BAA6B,SAAUC,IAAKC,aAC7CC,SAAWJ,SAASK,iBAAiB,kCACnCC,QAAU,GACVC,cAAgB,GAChBC,WAAa,IAAIC,IACjBC,iBAAmB,IAAID,QAExB,IAAIE,EAAI,EAAGA,EAAIP,SAASQ,OAAQD,IAAK,KAClCE,SAAWT,SAASO,GAEpBH,WAAWM,IAAID,SAASE,OACxBR,cAAcS,KAAKH,SAASE,OAE5BP,WAAWS,IAAIJ,SAASE,OAGxBF,SAASK,QAAQC,MAAQN,SAASE,QAClCT,QAAQU,KAAK,CACTI,OAAQP,SAASK,QAAQG,GACzBC,QAAST,SAASE,MAClBQ,SAAUvB,SAASwB,eAAe,sBAAwBX,SAASK,QAAQG,IAAIN,QAEnFL,iBAAiBO,IAAIJ,SAASK,QAAQG,KAI9CjB,SAAWJ,SAASK,iBAAiB,iCAEhC,IAAIM,EAAI,EAAGA,EAAIP,SAASQ,OAAQD,IAAK,KAClCE,SAAWT,SAASO,GACpBE,SAASK,QAAQO,OAASZ,SAASE,QAC9BL,iBAAiBI,IAAID,SAASK,QAAQG,KACvCf,QAAQU,KAAK,CACTI,OAAQP,SAASK,QAAQG,GACzBC,QAAStB,SAASwB,eAAe,qBAAuBX,SAASK,QAAQG,IAAIN,MAC7EQ,SAAUV,SAASE,SAM/BR,cAAcK,8BACDc,OAAO,CAChBC,KAAMC,uBAAaC,MAAMC,YACzBC,OAAO,mBAAU,UAAW,iBAC5BC,KAAMC,oBAAoB1B,cAAc2B,cACzCC,MAAK,SAAUC,OACdA,MAAMC,UAAUC,GAAGC,sBAAYC,MAAM,SAASC,GAC1CA,EAAEC,iBACFC,WAAWzC,IAAKI,QAASH,YAG7BiC,MAAMC,UAAUC,GAAGC,sBAAYK,QAAQ,KACnCC,SAASC,YAGbV,MAAMC,UAAUC,GAAGC,sBAAYQ,QAAQ,KACnCX,MAAMY,aAGVZ,MAAMa,UAGVN,WAAWzC,IAAKI,QAASH,iBAK/B8B,oBAAsBiB,MAAAA,YACU,mBAAU,uBAAwB,iBACvCC,KAG3BR,WAAa,CAACzC,IAAKI,QAASH,yBACzBiD,KAAK,CAAC,CACPC,WAAY,6BACZC,KAAM,CAACpD,IAAKA,IAAKqD,MAAOjD,SACxBkD,KAAM,SAAUC,WACPA,UAAUC,QAYXb,SAASc,KAAOxD,+BAXHuB,OAAO,CAChBC,KAAMC,uBAAaC,MAAM+B,OACzB7B,OAAO,mBAAU,UAAW,iBAC5BC,KAAMyB,UAAUI,SAAS,GAAGC,UAC7B3B,MAAK,SAAUC,OACdA,MAAMC,UAAUC,GAAGC,sBAAYK,QAAQ,KACnCC,SAASC,YAEbV,MAAMa,WAMlBc,KAAMC,sBAAaC"}